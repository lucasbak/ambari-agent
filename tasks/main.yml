---

- name: Ensure sudoers file for custom user exists
  file:
    path: "/etc/sudoers.d/{{ run_as_non_root_user }}"
    state: touch
    mode: '0440'
  become: yes
  when: run_as_non_root_user is defined and do_sudoers == True

- name: Add custom user to sudoers
  lineinfile:
    path: "/etc/sudoers.d/{{ run_as_non_root_user }}"
    state: present
    line: "{{ run_as_non_root_user }} ALL=(ALL) NOPASSWD:ALL"
    validate: 'visudo -cf %s'
  become: yes
  when: run_as_non_root_user is defined and do_sudoers == True


- name: Copy Repo [APT]
  copy:
    src: "{{ item }}"
    dest: /etc/apt/sources.list.d/
  when: offline_apt_repos is defined and offline_apt_repos
  with_fileglob:
    - "{{source_repo_folder}}/*.list"

- name: update apt cache
  shell: 'apt update -y'
  when: offline_apt_repos is defined and offline_apt_repos

- name: Import GPG key
  rpm_key:
    state: present
    key: "{{rpm_key}}"
  when: rpm_key is defined

- name: Copy Repo [YUM]
  copy:
    src: "{{ item }}"
    dest: /etc/yum.repos.d/
  with_fileglob:
    - "{{source_repo_folder}}/*.repo"
  when: offline_yum_repos is defined and offline_yum_repos

- name: Ensure software is installed (yum)
  yum: name="hdp-select" state=present update_cache=yes disable_gpg_check=yes
  when: ambari_stack_name|lower != 'odp' and ansible_distribution != 'Ubuntu' and prepare_packages

- name: Ensure software is installed (yum)
  yum: name="odp-select" state=present update_cache=yes disable_gpg_check=yes
  when: ambari_stack_name|lower == 'odp' and ansible_distribution != 'Ubuntu' and prepare_packages

- name: Ensure software is installed (apt)
  package: name="odp-select-{{stack_version_flattened}}" state=present
  when: ambari_stack_name|lower == 'odp' and ansible_distribution == 'Ubuntu' and prepare_packages

- name: Ensure Hadoop Client software is installed (apt)
  package: name="hadoop-{{stack_version_flattened}}-hdfs" state=present
  when: ambari_stack_name|lower == 'odp' and ansible_distribution == 'Ubuntu' and prepare_packages

- name: Packages [redhat7/8]
  package:
    name={{item}}
    state=installed
    update_cache=yes
  with_items:
    - ambari-agent
    - wget
  when: (ansible_distribution != "Ubuntu")

- name: Packages [ubuntu22]
  package:
    state: present
    name: "{{item}}"
    use: apt
  with_items: 
    - ambari-agent
    - wget
    - libmysqlclient21
    - libmariadb3
    - mysql-client
  when: (ansible_distribution == "Ubuntu")


- name: fix env custom user
  shell: chmod +x /var/lib/ambari-agent/ambari-env.sh
  when: run_as_non_root_user is defined

- name : change ownership
  shell: chown -R {{ run_as_non_root_user }} /var/lib/ambari-agent
  when: run_as_non_root_user is defined

- name : change ownership
  shell: chown -R {{ run_as_non_root_user }} /var/log/ambari-agent
  when: run_as_non_root_user is defined

- name : change ownership
  shell: chown -R {{ run_as_non_root_user }} /var/run/ambari-agent
  when: run_as_non_root_user is defined

- name : change ownership
  shell: chown -R {{ run_as_non_root_user }} /etc/ambari-agent
  when: run_as_non_root_user is defined

- name: Copy systemd service for ambari-agent
  template:
    src: ambari-agent.ini.j2
    dest: /etc/ambari-agent/conf/ambari-agent.ini

- name: Modify conf ambari-agent
  lineinfile:
    path: /etc/ambari-agent/conf/ambari-agent.ini
    regexp: '^hostname='
    line: 'hostname={{ ambari_server_master }}'

- name: Copy systemd service for ambari-agent
  template:
    src: ambari-agent.service
    dest: /usr/lib/systemd/system/ambari-agent.service
  when: ansible_distribution != "Ubuntu"

- name: Systemd reload
  systemd: daemon_reload=yes

- name: Disable chkconfig
  command: chkconfig ambari-agent off 
  when: ansible_distribution != "Ubuntu" and ansible_distribution_major_version < '9'

# - name: Check if Ambari-agent is running
#   command: ambari-agent status
#   register: ambari_agent_status
#   ignore_errors: true

# - name: Restart Ambari-agent if running
#   command: ambari-agent restart
#   when: ambari_agent_status.rc == 0

# - name: Start Ambari-agent if not running
#   command: ambari-agent start
#   when: ambari_agent_status.rc != 0



# - name: Check if Ambari-agent service is running
#   systemd:
#     name: ambari-agent
#   register: ambari_service_status

- name: Start service Ambari-agent if not running
  systemd:
    state: restarted
    name: ambari-agent

- name: Enable service Ambari-agent
  systemd:
    enabled: yes
    name: ambari-agent.service

- include_tasks: register_agent.yml
  when: register_agent is defined and register_agent
    
- name: Install packages based on distribution
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - python3.11
    - python3.11-psycopg2
    - python3.11-setuptools
    - python3.11-devel
    - python3.11-libs
    - python3.11-lxml
  when: ansible_distribution != "Ubuntu" and ansible_distribution_major_version == '9'

- name: Install packages based on distribution
  package:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - python39
    - python39-psycopg2
    - python39-setuptools
    - python39-devel
    - python39-libs
    - python39-lxml
  when: ansible_distribution != "Ubuntu" and (ansible_distribution_major_version == '9' or ansible_distribution_major_version == '8')


- name: Install packages based on distribution
  shell: > 
    alternatives --set python3 /usr/bin/python3.9
  when: ansible_distribution != "Ubuntu" and (ansible_distribution_major_version == '8')


- name: Install packages based on distribution
  shell: > 
    pip3.9 install distro
  when: ansible_distribution != "Ubuntu" and (ansible_distribution_major_version == '8')

- name: Install packages based on distribution
  shell: > 
    pip3.9 install rpm
  when: ansible_distribution != "Ubuntu" and (ansible_distribution_major_version == '8')


- name: install Hue python3 dependencies [RHEL8]
  package:
    name: ['python39-devel','python39-libs','python39-setuptools','python39-pip', 'python39-pip-wheel', 'python39-psycopg2', 'python39-lxml']
  when: all['HUE_SERVER'] is defined and inventory_hostname in all['HUE_SERVER'] and ( (ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "RedHat" or ansible_distribution == "AlmaLinux" or ansible_distribution == "RedHat") and ansible_distribution_major_version == '8')

- name: install Hue python3 dependencies [RHEL9]
  package:
    name: ['python3.11-devel','python3.11-libs','python3.11-setuptools','python3.11-pip', 'python3.11-pip-wheel', 'python3.11-psycopg2']
  when: all['HUE_SERVER'] is defined and inventory_hostname in all['HUE_SERVER'] and ( (ansible_distribution == "CentOS" or ansible_distribution == "Rocky" or ansible_distribution == "RedHat" or ansible_distribution == "AlmaLinux" or ansible_distribution == "RedHat") and ansible_distribution_major_version == '9')
